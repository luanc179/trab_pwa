@page "/atletas"
@using CadastroAtletasWasm.Helpers;
@using CadastroAtletasWasm.Models;
@using CadastroAtletaDll.DOs;

<PageTitle>Cadastro de Atletas</PageTitle>

<h1>Atletas</h1>

@if (objetos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <a class="btn btn-primary" href=@($"./atleta_incluir")>Incluir</a>
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Altura</th>
                <th>Peso</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in objetos)
            {
                <tr>
                    <td>@obj.Nome</td>
                    <td>@obj.Altura.ToString("N2")</td>
                    <td>@obj.Peso.ToString("N2")</td>
                    <td>
                        <a class="btn btn-warning" href=@($"./atleta_alterar/{obj.Id}")>Alterar</a>
                        <button class="btn btn-danger" @onclick="() => Excluir(obj.Id)">
                            Excluir
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected async override Task OnInitializedAsync()
    {        
        objetos = await api.RetornarTodosAsync();
    }

    private AcessoApi<AtletaDO> api = new AcessoApi<AtletaDO>("api/Atleta");

    private IList<AtletaDO>? objetos;
    
    private AtletaDO objetoAtual = new AtletaDO();

    private void Alterar(AtletaDO objeto)
    {
        objetoAtual = new AtletaDO 
        {
            Id = objeto.Id, 
            Nome = objeto.Nome, 
            Altura = objeto.Altura,
            Peso = objeto.Peso
        };
    }

    private async void Excluir(string? id)
    {
        if (id != null)
        {
            await api.ExcluirAsync(id);
            objetos = await api.RetornarTodosAsync();
            this.StateHasChanged();
        }
    }

    private async void Gravar()
    {
        if (objetoAtual.Id == null)
            await api.InserirAsync(objetoAtual);
        else
            await api.AlterarAsync(objetoAtual);
        
        objetoAtual = new AtletaDO();
        objetos = await api.RetornarTodosAsync();
        this.StateHasChanged();
    }
}
